<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.yts8.sixuniverse.chat.repository.ChatMapper">

  <!--채팅메세지 insert-->
  <insert id="saveMessage" parameterType="ChatDto" useGeneratedKeys="true" keyProperty="chatId">
    insert into chat (member_id, content, join_num)
    values (#{memberId}, #{content}, #{joinNum})
  </insert>


  <!--채팅방목록 출력용 최근 항목만 받아오기(전체최근항목으로변경하기)-->
  <select id="gggg" resultType="chatDto">
    select *
    from chat
    where member_id = #{memberId}
    order by create_date desc limit 1
  </select>

  <!-- 생성한 채팅방번호 각 memberId에 저장하기 -->
  <insert id="testCreateNewRoom" parameterType="ChatroomJoinDto" useGeneratedKeys="true" keyProperty="joinNum">
    insert into chatroom_join (member_id, name, chat_ref)
    values (#{memberId}, #{name}, #{chatRef})
  </insert>


  <!--새로운 채팅방 생성하기 -->
  <select id="createNewChatRef" resultType="java.lang.Long">
    SELECT ifnull(MAX(chat_ref), 0) + 1
    FROM chatroom_join;
  </select>


  <!-- 공통된 chatRef count -->
  <select id="chatRefCount" parameterType="MemberIdDto" resultType="java.lang.Long">
    Select count(g.chat_ref)
    from chatroom_join g
           join chatroom_join h on g.chat_ref = h.chat_ref
    where g.member_id = #{myMemberId}
      and h.member_id = #{hostId};
  </select>

  <!-- 공통된 chatRef 값 받아오기-->
  <select id="getChatRefTest" parameterType="MemberIdDto" resultType="java.lang.Long">
    Select g.chat_ref
    from chatroom_join g
           join chatroom_join h
                on g.chat_ref = h.chat_ref
    where g.member_id = #{myMemberId}
      and h.member_id = #{hostId};
  </select>


  <!-- join_num 값 받아오기-->
  <select id="findByChatRef" resultType="java.lang.Long">
    select join_num
    from chatroom_join
    where chat_ref = #{chatRef} limit 1;
  </select>

  <select id="findMemberIdByChatRef" resultType="java.lang.Long">
    select member_id
    from chatroom_join
    where chat_ref = #{chatRef} limit 1;
  </select>


  <!-- 채팅 출력용 -->
  <select id="findMessageByMemberId" parameterType="ChatDto" resultType="ChatDto">
    select *
    from chat
    where member_id = #{memberId}
  </select>
  <!-- 채팅 출력용 -->
  <select id="findUserNameByChatRef" parameterType="ChatroomJoinDto" resultType="ChatroomJoinDto">
    select name
    from chatroom_join
    where chat_ref = #{chatRef}
  </select>

  <!-- 채팅방 번호로 메세지 찾기 -->
  <select id="findMessageByChatRef" parameterType="java.lang.Long" resultType="ChatDto">
    select c.member_id, c.content, c.create_date, r.chat_ref
    from chat c
           join chatroom_join r
                on c.join_num = r.join_num
    where c.join_num in (select distinct g.join_num
                         from chatroom_join h
                                join chatroom_join g on g.chat_ref = #{chatRef})
    order by create_date asc
  </select>

  <!-- 카운트 -->
  <select id="findMessages" parameterType="java.lang.Long" resultType="java.lang.Long">
    select count(*)
    from chat c
           join chatroom_join r
                on c.join_num = r.join_num
    where c.join_num in (select distinct g.join_num
                         from chatroom_join h
                                join chatroom_join g on g.chat_ref = #{chatRef})
    order by create_date asc
  </select>


  <!-- 채팅방 리스트 출력 용-->
  <select id="getLastChat" parameterType="java.lang.Long" resultType="MessageDto">
    select m.username,
           m.profile_img,
           cj.chat_ref,
           c.content,
           c.create_date
    from chatroom_join cj
           join chat c on cj.join_num = c.join_num
           join member m on m.member_id = cj.member_id
    where c.chat_id in (select max(cc.chat_id)
                        from chat cc
                               join chatroom_join ccj on ccj.join_num = cc.join_num
                        where ccj.chat_ref in (select chat_ref from chatroom_join where member_id = #{myMemberId})
                        group by cc.join_num)
    order by c.create_date desc
  </select>

  <select id="findHostId" parameterType="ChatListDto" resultType="java.lang.Long">
    select distinct g.member_id
    from chatroom_join g
           join chatroom_join h
                on g.chat_ref = g.chat_ref
    where g.chat_ref = #{chatRef}
      and g.member_id not in (#{myMemberId})
  </select>

  <select id="findUsernameById" parameterType="java.lang.Long" resultType="java.lang.String">
    select username
    from member
    where member_id = #{hostId}
  </select>

  <!--호스트의 메세지가 있는 채팅방갯수-->
  <select id="countReplyOfHost" parameterType="java.lang.Long" resultType="java.lang.Long">
    select count(chat_ref)
    from (
           select distinct r.chat_ref
           from chatroom_join r
                  join chat c
                       on c.join_num = r.join_num
           where (r.chat_ref in
                  (select distinct chat_ref from chatroom_join where member_id = #{hostId}))
             and c.member_id = #{hostId}) a
  </select>
  <!--호스트가 속한 채팅방의 갯수-->
  <select id="countHostRoom" parameterType="java.lang.Long" resultType="java.lang.Long">
    select distinct count(chat_ref)
    from chatroom_join
    where member_id = #{hostId};
  </select>

</mapper>
